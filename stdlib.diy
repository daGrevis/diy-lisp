;; Some logical operators.

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define not
    (lambda (b)
        (if b #f #t)))

(define or
    (lambda (a b)
        (if a a b)))

(define and
    (lambda (a b)
        (if a
            (if b #t #f)
            #f)))

(define xor
    (lambda (a b)
        (not (eq a b))))

(define >=
    (lambda (a b)
        (or (eq a b) (> a b))))

(define <=
    (lambda (a b)
        (or (eq a b) (not (> a b)))))

(define <
    (lambda (a b)
        (and (not (eq a b)) (not (> a b)))))

(define sum
    (lambda (coll)
        (if coll
            (+ (head coll) (sum (tail coll)))
            0)))

(define length
    (lambda (coll)
        (if coll
            (+ 1 (length (tail coll)))
            0)))

(define append
    (lambda (coll-a coll-b)
        (if (empty coll-a)
            coll-b
            (cons
                (head coll-a)
                (append (tail coll-a) coll-b)))))

(define filter
    (lambda (pred coll)
        (if (empty coll)
            '()
            (if (pred (head coll))
                (cons (head coll) (filter pred (tail coll)))
                (filter pred (tail coll))))))

(define map
    (lambda (f coll)
        (if (empty coll)
            '()
            (cons
                (f (head coll))
                (map f (tail coll))))))

(define _reverse
    (lambda (coll acc)
        (if (empty coll)
            acc
            (_reverse (tail coll) (cons (head coll) acc)))))

(define reverse
    (lambda (coll)
        (_reverse coll '())))

(define range
    (lambda (from to)
        (if (> from to)
            '()
            (cons from (range (+ from 1) to)))))

(define _lesser-or-equal
    (lambda (coll pivot)
        (filter (lambda (x) (<= x pivot)) coll)))

(define _greater
    (lambda (coll pivot)
        (filter (lambda (x) (> x pivot)) coll)))

(define sort
    (lambda (coll)
        (if (empty coll)
            '()
            (append
                (append
                    (sort (_lesser-or-equal (tail coll) (head coll)))
                    (cons (head coll) '()))
                (sort (_greater coll (head coll)))))))
